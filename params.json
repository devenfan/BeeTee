{"name":"Beetee","tagline":"Demo application for Bluetooth device scanning using the iOS private framework \"BluetoothManager\"","body":"#BeeTee\r\n\r\n\r\nDemo application for bluetooth device scanning using the iOS private framework \"BluetoothManager\"\r\n\r\n![GUI](https://raw.githubusercontent.com/michaeldorner/BeeTee/master/landingPage/screen.png)\r\n\r\n\r\n## Abstract\r\n\r\nBecause it is not trivial to use a private iOS framework, I implemented a demo application for the `BluetoothManager.framework` in iOS 7. I have not used the ARC.\r\n\r\nBased on the [AppStore guideline §2.5](https://developer.apple.com/appstore/resources/approval/guidelines.html) not to use private (undocumented) functions it is not possible to publish apps with the `BluetoothManager.framework` in the AppStore. You may need a valid membership of the [iOS Developer Program](https://developer.apple.com/programs/ios/), because it makes sense that this app and framework does not work in the simulator.\r\n\r\n\r\n\r\n##Requirements for this app\r\n\r\n* iOS 7 and greater\r\n* iOS 7 compatible device (does not working on the simulator)\r\n* Xcode 5 and greater\r\n* Correctly placed header files (see Preparations)\r\n\r\nExcept the GUI the app and the framework as well works also fine for iOS 5 and 6. But take care about the path (see next paragraph).\r\n\r\n##Preparations\r\n\r\nJust to clearify: Of course, since they are just two header files, it does not matter actually where the header files are placed in your project. But if you want to use the `BluetoothManager.framework` in other projects, it makes life easier just to import  the framework with the headers. \r\n\r\n* Find the folder, e.g. by terminal\r\n<pre><code>open /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.0.sdk/System/Library/PrivateFrameworks/BluetoothManager.framework</code></pre>\r\n* Extract the [Headers.zip](/Headers.zip) archive and add the extracted folder `Headers` which includes `BluetoothManager.h` and `BluetoothDevice.h` in the directory above.\r\n* Restart Xcode\r\n* Now you will find the `BluetoothManager.framework` in Targets → YourApp → Build Phases → Link Binary With Libraries:\r\n![Alt text](https://raw.githubusercontent.com/michaeldorner/BeeTee/master/landingPage/linkLibrary.png)\r\n\r\n\r\nThe folder can differ: Please take care about your iOS version!\r\n\r\n\r\n\r\n##The BluetoothManager.framework\r\n\r\n####Available Notifications\r\n    BluetoothAvailabilityChangedNotification\r\n    BluetoothDiscoveryStateChangedNotification\r\n\r\n    BluetoothDeviceDiscoveredNotification\r\n    BluetoothDeviceRemovedNotification\r\n    \r\n    // more methods they are not used in this app\r\n    BluetoothPowerChangedNotification\r\n    BluetoothConnectabilityChangedNotification\r\n    BluetoothDeviceUpdatedNotification\r\n\r\n    BluetoothDeviceConnectSuccessNotification\r\n    BluetoothConnectionStatusChangedNotification\r\n    BluetoothDeviceDisconnectSuccessNotification\r\n\r\n\r\n####Usage\r\n\r\nCan be used e.g. \r\n<pre><code>[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(bluetoothAvailabilityChanged:) name:@\"BluetoothAvailabilityChangedNotification\" object:nil];</code></pre>\r\nand \r\n<pre><code>- (void)bluetoothAvailabilityChanged:(NSNotification *)notification { ... }</code></pre>\r\n\r\n\r\n\r\n##Licence\r\nGPL (v3)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}